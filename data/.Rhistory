summary(crime)
bins <- quantile(boston_scaled$crim)
bins
summary(boston_scaled$crim)
boston_scaled <- select(boston_scaled, -crim)
library(dplyr)
boston_scaled <- select(boston_scaled, -crim)
table(crime)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
View(boston_scaled)
ind
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
train
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
View(boston_scaled)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
library(MASS)
library(tidyr)
library(dplyr)
library(corrplot)
data("Boston")
boston_scaled <- scale(Boston)
summary(boston_scaled)
summary(Boston)
cor_matrix<-cor(Boston) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
?cor
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
# boston_scaled is available
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
library(MASS)
library(MASS)
library(tidyr)
library(dplyr)
library(corrplot)
data("Boston")
boston_scaled <- scale(Boston)
summary(boston_scaled)
summary(Boston)
cor_matrix<-cor(Boston) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
?cor
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
```{r}
```{r}
library(dplyr)
library(MASS)
library(tidyr)
library(corrplot)
data("Boston")
str(Boston)
dim(Boston)
library(MASS)
library(tidyr)
library(dplyr)
library(corrplot)
data("Boston")
boston_scaled <- scale(Boston)
summary(boston_scaled)
summary(Boston)
cor_matrix<-cor(Boston) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
?cor
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
lda.fit <- lda(crime ~ ., data = train)
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
View(boston_scaled)
View(test)
View(test)
library(MASS)
library(tidyr)
library(dplyr)
library(corrplot)
data("Boston")
boston_scaled <- scale(Boston)
summary(boston_scaled)
summary(Boston)
cor_matrix<-cor(Boston) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
?cor
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
# MASS and train are available
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
View(test)
test <- select(test, -crime)
test <- dplyr::select(test, -crime)
View(test)
View(test)
data('Boston')
reload<-scale(Boston)
dist_re<-dist(reload)
summary(dist_re)
km <-kmeans(reload, centers = 4)
km
data('Boston')
reload<-scale(Boston)
dist_re<-dist(reload)
summary(dist_re)
km <-kmeans(reload, centers = 4)
pairs(Boston, col = km$cluster)
data('Boston')
reload<-scale(Boston)
dist_re<-dist(reload)
summary(dist_re)
km <-kmeans(reload, centers = 3)
pairs(Boston, col = km$cluster)
data('Boston')
reload<-scale(Boston)
dist_re<-dist(reload)
summary(dist_re)
km <-kmeans(reload, centers = 3)
pairs(reload, col = km$cluster)
data('Boston')
reload<-scale(Boston)
dist_re<-dist(reload)
summary(dist_re)
km <-kmeans(reload, centers = 4)
pairs(reload, col = km$cluster)
set.seed(123)
# determine the number of clusters
k_max <- "change me!"
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = "change me!")
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# Boston dataset is available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
library(ggplot2)
# Boston dataset is available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
qplot(x = 1:k_max, y = twcss, geom = 'line')
set.seed(123)
# determine the number of clusters
k_max <- 20
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
qplot(x = 1:k_max, y = twcss, geom = 'line')
# Boston dataset is available
set.seed(123)
# determine the number of clusters
k_max <- 8
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clus
set.seed(123)
k_max <- 20
twcss <- sapply(1:k_max, function(k){kmeans(reload, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
View(gii)
View(hd)
View(hd)
View(hd)
names(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
names(hd)
names(hd)<-c("rank","country","GII","MMR","Birth","Parliament", "2EduF","2EduM","LabourF","LabourM")
names(hd)
names(gii)
names(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "2EduF","2EduM","LabourF","LabourM")
names(gii)
names(hd)
names(gii)
names(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "2EduF","2EduM","LabourF","LabourM")
names(gii)
names(hd)
names(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
names(hd)
View(gii)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
names(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "2EduF","2EduM","LabourF","LabourM")
names(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, ratio = 2EduF/2EduM)
gii<-mutate(gii, 2ratio = 2EduF/2EduM)
2EduF
gii$2EduF
gii<-mutate(gii, "2ratio" = "2EduF"/"2EduM")
Edu2F
gii$Edu2F
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
names(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabourF","LabourM")
names(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, ratio2 = edu2F/Edu2M)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabourF","LabourM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, ratio2 = edu2F/Edu2M)
View(gii)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabourF","LabourM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, ratio2 = edu2F/Edu2M)
View(gii)
gii<-mutate(gii, ratio2 = edu2F/Edu2M)
gii<-mutate(gii, ratio2 = Edu2F/Edu2M)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabourF","LabourM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabF","LabM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
gii<-mutate(gii, rLab2 = LanF/LabM)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabF","LabM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
gii<-mutate(gii, rLab2 = LabF/LabM)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabF","LabM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
gii<-mutate(gii, rLab = LabF/LabM)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabF","LabM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
gii<-mutate(gii, rLab = LabF/LabM)
human<- inner_join(gii,hd, by = country, suffix = c(".gii", ".hd"))
human<- inner_join(gii,hd, by = "country", suffix = c(".gii", ".hd"))
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabF","LabM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
gii<-mutate(gii, rLab = LabF/LabM)
human<- inner_join(gii,hd, by = "country", suffix = c(".gii", ".hd"))
setwd("d:/koulujutut/opendata/iods-project/data/")
write.table(human,file="human.csv")
read.csv(human)
h00p<-read.csv("human.csv")
View(h00p)
h00p<-read.csv("human.csv",sep = ",")
h00p<-read.csv("human.csv",sep = ",",header = FALSE)
write.table(human,file="human.csv",sep = ",",header = FALSE)
write.table(human,file="human.csv",sep = ",")
h00p<-read.csv("human.csv",sep = ",",header = FALSE)
h00p<-read.csv("human.csv",sep = ",",header = TRUE)
read.csv("human.csv",sep = ",",header = TRUE)
test<-read.csv("human.csv",sep = ",",header = TRUE)
View(test)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
dim(gii)
str(hd)
str(gii)
summary(hd)
summary(gii)
colnames(gii)<-c("rank","country","GII","MMR","Birth","Parliament", "Edu2F","Edu2M","LabF","LabM")
colnames(hd)<-c("rank","country","HDI","LE","EYoE","MYoE","GNI","GNImHDI")
gii<-mutate(gii, rEdu2 = Edu2F/Edu2M)
gii<-mutate(gii, rLab = LabF/LabM)
human<- inner_join(gii,hd, by = "country", suffix = c(".gii", ".hd"))
setwd("d:/koulujutut/opendata/iods-project/data/")
write.table(human,file="human.csv",sep = ",")
test<-read.csv("human.csv",sep = ",",header = TRUE)
library(dplyr)
library(MASS)
library(tidyr)
library(ggplot2)
library(corrplot)
data("Boston")
str(Boston)
dim(Boston)
